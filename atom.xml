<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[技术进阶]]></title>
  <link href="http://zheng-hongyi.github.io/atom.xml" rel="self"/>
  <link href="http://zheng-hongyi.github.io/"/>
  <updated>2015-07-26T09:51:54+08:00</updated>
  <id>http://zheng-hongyi.github.io/</id>
  <author>
    <name><![CDATA[郑洪毅]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[软件开发建议]]></title>
    <link href="http://zheng-hongyi.github.io/blog/2015/07/26/ruan-jian-kai-fa-guo-cheng/"/>
    <updated>2015-07-26T09:06:46+08:00</updated>
    <id>http://zheng-hongyi.github.io/blog/2015/07/26/ruan-jian-kai-fa-guo-cheng</id>
    <content type="html"><![CDATA[<p>我的软件开发之路虽然不是很长，但是经历了不少，从独立开发到团队协作，都很有感触，这些感触对于大家来说，一定程度上可以起到指导作用。<br></p>

<h3>有从头到尾独立开发的经历很重要</h3>

<p>这里所说的独立开发，就是自己一个人负责一个项目的开发工作，这样可以锻炼一个人的各方面的能力，架构方面很明显。另外，如果要是能在自己开发的项目上重构一把，那就更好了，如果没有机会，一定要及时总结，指导自己以后写代码。</p>

<h3>职责单一</h3>

<p>一个类、一个方法甚至是一个变量，让它的职责单一，只让它做一件事，这样写代码就好比拼积木，即使有变动，也能很快理清思路，当然，配备适当的注释会更效率。我见过很多人写的代码，一个方法有成百上千行代码，类里面就不用说了，看着很是别扭，有什么改动，成本很大。低耦合和职责单一在一定程度上是相同的。这些在《重构 改善既有代码的设计》以及 《设计模式》中都有涉及。</p>

<h3>MVC亦或MVVM在一定程度上要严格遵守</h3>

<p>mvc，做过.Net的可能用三层架构描述，很多程序员不注重这些的使用，在移动端，我见过很多人，所有的代码都在Controller里面完成，导致Controller特别的大，如果这样，mvc有啥用。我建议最好是层次划分清晰：界面显示层-业务逻辑层-控制器-模型，基本逃不出这个设计，MVVM在解决Controller臃肿的问题上很有效，建议找一些权威网站去了解，例如objc中国<a href="http://objccn.io">http://objccn.io</a></p>

<h3>理论一定要充足，理论指导实践</h3>

<p>我看别人的代码，一个很复杂的算法里面竟然有界面显示，除了职责不单一，我感觉就是理论不足造成的，不知道算法的定义以及要素（有穷性、确切性、输入项、输出项、可行性）</p>

<h3>建议</h3>

<p>先写到这里，建议大家，经常翻看《设计模式》《重构》《算法》之类的书籍。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Iosben Di Tong Zhi]]></title>
    <link href="http://zheng-hongyi.github.io/blog/2015/07/25/iosben-di-tong-zhi/"/>
    <updated>2015-07-25T00:00:00+08:00</updated>
    <id>http://zheng-hongyi.github.io/blog/2015/07/25/iosben-di-tong-zhi</id>
    <content type="html"><![CDATA[<p>iOS开发本地通知，最好的实践就是做一个闹钟程序。这里只说一下我遇到的问题。</p>

<h3>UILocalNotification</h3>

<p>我写了一个闹钟插件，所有的逻辑经检查都没有问题，但就是在测试的时候取消通知总是会取消不完全，比如注册了n个，取消的时候取消n-x个，注册的时候也存在注册数量和自己的预期不一致的情况，反复检查逻辑没有问题。<br>
这里只给出结果，过程不再赘述，原因是线程所致，本地通知的注册与取消在主线程中完成即可避免这个问题。官方文档没有找到合适的解说。可能和UINotification的线程问题同属一类。<br>
关于UINotification，官方是这么描述的：In a multithreaded application, notifications are always delivered in the thread in which the notification was posted, which may not be the same thread in which an observer &hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS开发有关界面的那点事儿]]></title>
    <link href="http://zheng-hongyi.github.io/blog/2015/07/06/uiscrollviewdian-ji-zhuang-tai-lan-gun-hui-ding-bu/"/>
    <updated>2015-07-06T23:19:50+08:00</updated>
    <id>http://zheng-hongyi.github.io/blog/2015/07/06/uiscrollviewdian-ji-zhuang-tai-lan-gun-hui-ding-bu</id>
    <content type="html"><![CDATA[<p>iOS开发中总会遇到或多或少的坑，这里总结一二。</p>

<h3>UIScrollView那点儿坑</h3>

<p>iOS开发，关于UIScrollView点击状态栏回到顶部，这里有个坑，前两天改同事的代码改出来的bug，就是一个界面上只允许有一个UIScrollView允许滚到顶部，若有其他UIScrollView，必须禁掉，否则就都没有了。<br>
进阶：以此类推，所有集成字UIScrollView的视图控件，应该都有这个坑，都要注意。</p>

<h3>有关autolayout</h3>

<p>autolayout博大精深，总会有一些实现需要混编，但是有的时候就会有各种意想不到的效果出现，这时候需要考虑一下你用代码写的那一部分UI的autoresizingMask属性，设置为UIViewAutoresizingNone有的时候会帮助你不少忙。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React Native尝试]]></title>
    <link href="http://zheng-hongyi.github.io/blog/2015/06/30/react-nativechang-shi/"/>
    <updated>2015-06-30T08:10:07+08:00</updated>
    <id>http://zheng-hongyi.github.io/blog/2015/06/30/react-nativechang-shi</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开发感悟]]></title>
    <link href="http://zheng-hongyi.github.io/blog/2015/06/29/kai-fa-gan-wu/"/>
    <updated>2015-06-29T23:30:30+08:00</updated>
    <id>http://zheng-hongyi.github.io/blog/2015/06/29/kai-fa-gan-wu</id>
    <content type="html"><![CDATA[<p>编程是一件很快乐的事，边编程边思考，编程一切，思考一切，乐在其中。</p>

<h3>编程方法论</h3>

<p>1、编程锻炼的是解决问题的能力，说明白点，就是如何解决问题，在这个过程中，总结出一套适用于自己的解决问题的过程，也可以说是步骤，由小见大，成为你的方法论，指导一切。<br>
2、编程锻炼的是评估预测能力。根据自己现有的资源或者能力，来预测一项任务的截止日期。<br></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS提交后加急审核]]></title>
    <link href="http://zheng-hongyi.github.io/blog/2015/06/29/iosti-jiao-hou-jia-ji-shen-he/"/>
    <updated>2015-06-29T22:38:34+08:00</updated>
    <id>http://zheng-hongyi.github.io/blog/2015/06/29/iosti-jiao-hou-jia-ji-shen-he</id>
    <content type="html"><![CDATA[<p>加急审核其实很简单，官方有文档，这里只附上链接，<a href="https://developer.apple.com/appstore/contact/appreviewteam/index.html">点击进入</a>，小学英语水平即可读懂。这里需要说明的是支持中文。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS打包（没有cocoapods）]]></title>
    <link href="http://zheng-hongyi.github.io/blog/2015/06/28/iosda-bao/"/>
    <updated>2015-06-28T17:46:04+08:00</updated>
    <id>http://zheng-hongyi.github.io/blog/2015/06/28/iosda-bao</id>
    <content type="html"><![CDATA[<p>这里只贴出脚本 <br></p>

<pre><code>#!/bin/sh

#根据需要配置
ipaDir="/Users/zheng/Desktop/Zheng/iPa/temp"
mkdir "${ipaDir}"

#工程目录
distDir="/Users/zheng/Desktop/Workbench/KungFuBear/project"

cd "${distDir}"

appFolder="test"
appName="tmp"
#根据工程需要来配置
target="project" 
clientVersion=$1

releaseDir="build/Release-iphoneos"

TARGET="${target}"

CONFIGURATION="Release"
SDK="iphoneos"
#根据工程配置
IDENTITY="iPhone Distribution:————y Co. Ltd"
KEYCHAIN="/Library/Keychains/System.keychain"
PASSWORD=""

security unlock-keychain -p ${PASSWORD} ${KEYCHAIN}

#sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer  
xcodebuild clean
xcodebuild -target "${TARGET}" -configuration ${CONFIGURATION}
ipapath="${ipaDir}/${appName}${clientVersion}.ipa"
ipa="${appName}.ipa"
echo "$ipapath"

appfile="${releaseDir}/${TARGET}.app"
echo "$appfile"

xcrun -sdk iphoneos PackageApplication -v "$appfile" -o "$ipapath"

echo "=========Success========="
echo "Waiting for next runtime......"


#done
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS打包脚本（有cocoapods）]]></title>
    <link href="http://zheng-hongyi.github.io/blog/2015/06/28/iosda-bao-jiao-ben/"/>
    <updated>2015-06-28T17:20:51+08:00</updated>
    <id>http://zheng-hongyi.github.io/blog/2015/06/28/iosda-bao-jiao-ben</id>
    <content type="html"><![CDATA[<p>本文章借助了xctool，所以要首先安装xctool，要安装xctool，这里通过brew（一个包管理工具），所以这里的步骤是：<br>
1、安装brew <br>
curl -LsSf <a href="http://github.com/mxcl/homebrew/tarball/master%C2%A0|sudo%C2%A0tar%C2%A0xvz%C2%A0-C/usr/local%C2%A0--strip%C2%A01">http://github.com/mxcl/homebrew/tarball/master%C2%A0|sudo%C2%A0tar%C2%A0xvz%C2%A0-C/usr/local%C2%A0--strip%C2%A01</a> <br>
2、安装xctool <br>
      sudo brew update <br>
      sudo brew install xctool <br>
3、然后就可以运用这里的脚本了 （建议放在一个文件里然后运行）</p>

<p><h>
脚本说明：<br></p>

<pre><code>#!/bin/sh

#  autoCompile.sh

#
#  Created by zheng on 15-5-6.
#  Copyright (c) 2015年 zheng. All rights reserved.

#输出目录 (这个需要配置)
ipaDir="/Users/hongyizheng/Desktop/iPa/Keep"
mkdir "${ipaDir}"

#临时目录，这里是要将源代码拷贝到一个临时目录 （也需要配置）
sourceDir="/Users/hongyizheng/Desktop/iPa/Temp"
mkdir "${sourceDir}"

#源文件所在目录 （需要配置，这里是临时的）
distDir="/Users/hongyizheng/Desktop/workbench/keepdev/temp"
cp -R "${distDir}" "${sourceDir}"

#简单的配置
appName="Keep"
target="Keep"
#参数1 版本号
clientVersion=$1
#参数2 打包时间
compileTime=$2

CONFIGURATION="Release"
KEYCHAIN="/Library/Keychains/System.keychain"

#一个临时目录
buildPath="/Users/hongyizheng/Desktop/keep.xcarchive"
#最后的输出路径
ipaName="/Users/hongyizheng/Desktop/keep_${clientVersion}_${compileTime}.ipa"
#证书 (需要配置，输入文件名称即可)
profile=""


#进入临时目录准备开始编译 （这里需要注意与工程一直）
cd "${sourceDir}/temp"

security unlock-keychain -p ${PASSWORD} ${KEYCHAIN}

#开始编译
xctool -workspace "Keep.xcworkspace" -scheme "Keep" -configuration ${CONFIGURATION} clean

xctool  -workspace "Keep.xcworkspace" -scheme "Keep" archive -archivePath ${buildPath}
#开始导出
xcodebuild -exportArchive -exportFormat IPA -archivePath ${buildPath} -exportPath ${ipaName} -exportProvisioningProfile "$profile"
#删除临时文件
rm -rf "${sourceDir}"

echo "=========Success========="
echo "Waiting for next runtime......"


#done
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[你好，博客]]></title>
    <link href="http://zheng-hongyi.github.io/blog/2015/06/28/hello-blog/"/>
    <updated>2015-06-28T15:57:57+08:00</updated>
    <id>http://zheng-hongyi.github.io/blog/2015/06/28/hello-blog</id>
    <content type="html"><![CDATA[<h2>博客笔记（只为提醒我自己）</h2>

<h2>1、新建博客</h2>

<p>rake new_post[&lsquo;博客title&rsquo;] <br>
rake generate  <br>
rake preview</p>

<h2>2、发布博客</h2>

<p>rake deploy</p>

<h2>3、推送分支</h2>

<p>git add . <br>
git commit -a &ldquo;commont&rdquo;<br>
git push origin source<br></p>
]]></content>
  </entry>
  
</feed>
